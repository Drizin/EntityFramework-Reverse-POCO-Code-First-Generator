// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ConsoleApplication1.Entities
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public partial class FakeTesteDB : ITesteDB
    {
        public System.Data.Entity.DbSet<Table1> Table1 { get; set; }
        public System.Data.Entity.DbSet<Table1To6> Table1To6 { get; set; }
        public System.Data.Entity.DbSet<Table2> Table2 { get; set; }
        public System.Data.Entity.DbSet<Table3> Table3 { get; set; }
        public System.Data.Entity.DbSet<Table4> Table4 { get; set; }
        public System.Data.Entity.DbSet<Table5> Table5 { get; set; }
        public System.Data.Entity.DbSet<Table6> Table6 { get; set; }
        public System.Data.Entity.DbSet<Table7> Table7 { get; set; }
        public System.Data.Entity.DbSet<Table8> Table8 { get; set; }
        public System.Data.Entity.DbSet<Table9> Table9 { get; set; }

        public FakeTesteDB()
        {
            Table1 = new FakeDbSet<Table1>("Table1ID");
            Table1To6 = new FakeDbSet<Table1To6>("Table1ID", "Table6ID");
            Table2 = new FakeDbSet<Table2>("Table2ID");
            Table3 = new FakeDbSet<Table3>("Table3ID");
            Table4 = new FakeDbSet<Table4>("Table4ID");
            Table5 = new FakeDbSet<Table5>("Table5ID");
            Table6 = new FakeDbSet<Table6>("Table6ID");
            Table7 = new FakeDbSet<Table7>("Table7AID", "Table7BID");
            Table8 = new FakeDbSet<Table8>("Table7BID", "Table7AID");
            Table9 = new FakeDbSet<Table9>("Table7BID", "Table7AID");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
